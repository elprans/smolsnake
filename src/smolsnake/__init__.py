# Copyright Contributors to the smolsnake project.
#
# SPDX-License-Identifier: 0BSD


from typing import (
    Any,
    Optional,
    Tuple,
)

import pathlib

import click

from . import injector
from . import installer
from . import locker


VersionInfo = Tuple[int, int, int]


class VersionParamType(click.ParamType):
    name = "version"

    def convert(
        self,
        value: Any,
        param: Optional[click.Parameter],
        ctx: Optional[click.Context],
    ) -> VersionInfo:
        if not isinstance(value, str):
            self.fail(
                f"{value!r} is not a string",
                param,
                ctx,
            )

        parts = value.split(".")
        len_parts = len(parts)
        if len_parts != 2 and len_parts != 3:
            self.fail(
                f"version must include two or three components, "
                f"got {len_parts}: {value!r}",
                param,
                ctx,
            )

        try:
            version_info = [int(p) for p in parts]
        except ValueError:
            self.fail(f"{value!r} is not a valid version", param, ctx)

        if len_parts == 2:
            version_info.append(0)

        return tuple(version_info)  # type: ignore


@click.group()
def cli() -> None:
    pass


@cli.command()
@click.option(
    "--function-source-path",
    required=True,
    type=click.Path(exists=True),
    help=("Path to Lambda function source"),
)
@click.option(
    "--python-version",
    type=VersionParamType(),
    required=True,
    help=("Python version to compute dependencies for."),
)
@click.option(
    "--output",
    type=click.Path(),
)
def lock(
    *,
    function_source_path: str,
    output: Optional[str],
    python_version: VersionInfo,
) -> int:
    locker.lock_deps(
        pathlib.Path(function_source_path),
        pathlib.Path(output) if output is not None else None,
        python_version,
    )
    return 0


@cli.command()
@click.option(
    "--lockfile",
    type=click.Path(),
    help=(
        "Path to Lambda function dependency lockfile "
        + '(generated by "smolsnake lock")'
    ),
)
@click.option(
    "--target",
    type=click.Path(exists=True),
    required=True,
)
@click.option(
    "--python-version",
    type=VersionParamType(),
    required=True,
    help=("Python version to cache dependencies for."),
)
def install(*, lockfile: str, target: str, python_version: VersionInfo) -> int:
    installer.install(
        pathlib.Path(target),
        pathlib.Path(lockfile)
        if lockfile is not None and lockfile != "-"
        else None,
        python_version,
    )
    return 0


@cli.command()
@click.option(
    "--lockfile",
    type=click.Path(),
    help=(
        "Path to Lambda function dependency lockfile "
        + '(generated by "smolsnake lock")'
    ),
)
@click.option(
    "--python-version",
    type=VersionParamType(),
    required=True,
    help=("Python version to inject dependencies for."),
)
@click.option(
    "--target",
    type=click.Path(),
)
def injectsyspath(
    *,
    lockfile: str,
    target: str,
    python_version: VersionInfo,
) -> int:
    injector.injectsyspath(
        pathlib.Path(target) if target is not None and target != "-" else None,
        pathlib.Path(lockfile)
        if lockfile is not None and lockfile != "-"
        else None,
        python_version,
    )
    return 0
